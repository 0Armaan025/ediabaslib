Debugging of ISTA-D:
====================

Decompile ISTA-D:
=================
git clone --recursive https://github.com/0xd4d/de4dot.git
Build de4dot.netframework.sln as Release
The binary is in the subfolder: Release\net45\de4dot.exe
Copy files from "TesterGUI\bin\Release" to "TesterGUI\bin\ReleaseMod"
de4dot -r "TesterGUI\bin\Release" -ru -ro "TesterGUI\bin\ReleaseMod" --dont-rename
The files in "TesterGUI\bin\Release" are not modified, "TesterGUI\bin\ReleaseMod" now contains the deobfuscated files.

de4dot -r "PSdZ\hostx64Org" -ru -ro "PSdZ\hostx64" --dont-rename
The files in "PSdZ\hostx64Org" are not modified, "PSdZ\hostx64" now contains the deobfuscated files.
de4dot -r "PSdZ\hostOrg" -ru -ro "PSdZ\host" --dont-rename
The files in "PSdZ\hostOrg" are not modified, "PSdZ\host" now contains the deobfuscated files.

Disable ISTAGUI.exe hash check:
===============================
Modify RheingoldCoreFramework.dll (Edit -> Edit class, remove all references to other ISTA-D version first):
BMW.Rheingold.CoreFramework.InteropHelper:
public static bool VerifyStrongName(Type t, bool force)
At the end of the function add: flag = true;
-------------------------------------------------------------------------------------
			flag = true;
			if (!flag)
			{
				throw new Exception(string.Format("Assembly signature of {0} cannot be verified", ""));
			}
			return flag;
-------------------------------------------------------------------------------------
File -> Save module
If file is blocked, terminate IstaSericesHost.exe first!

Disable ISTAGUI.exe memory check:
================================
or use:
<add key="BMW.Rheingold.ISTAGUI.disableCheckSystemRequirements" value="true" />
Modify ISTAGUI.exe (Edit -> Edit class, remove all references to other ISTA-D version first):
BMW.Rheingold.ISTAGUI.Controller:
public Dictionary<InsufficientSystemRequirement, int[]> CheckSystemRequirements(bool isProgammingEnabled)
add: memoryCapacityInMBytes = num;
-------------------------------------------------------------------------------------
memoryCapacityInMBytes = num;
if (memoryCapacityInMBytes < num)
-------------------------------------------------------------------------------------
File -> Save module
If file is blocked, terminate IstaSericesHost.exe first!

Fix ICOM apiInitExt:
====================
Modify RheingoldVehicleCommunication.dll (Edit -> Edit class, remove all references to other ISTA-D version first):
Function: public bool ECUKom.InitVCI(IVciDevice device, bool logging)
case VCIDeviceType.ICOM:
Change init function to:
-------------------------------------------------------------------------------------
flag = this.api.apiInitExt("ENET", "_", "Rheingold", "RemoteHost=" + device.IPAddress + ";DiagnosticPort=50160;ControlPort=50161", logging);
-------------------------------------------------------------------------------------
If file is blocked, terminate IstaSericesHost.exe first!

Compile dnSpy-x86:
============================
git clone --recursive https://github.com/0xd4d/dnSpy.git
Install .NET Core 3.0 SDK and .NET Core 3.1 SDK
Install .NET Framework 4.8 SDK and Package for target version .NET Framework 4.8 in VS2019
Open dnSpy.sln in VS2019 and build solution as release
The binary is in the subfolder: dnSpy\dnSpy\bin\Release\net48\dnSpy-x86.exe

Debug ISTA-D with dnSpy-x86:
============================
Modify IstaOperationController.dll (Edit -> Edit class, remove all references to other ISTA-D version first):
in IstaOperationStarter.Start() add at the end of the function:
-------------------------------------------------------------------------------------
	if (Debugger.IsAttached)
	{
		System.Windows.Forms.MessageBox.Show(new System.Windows.Forms.Form { System.Windows.Forms.TopMost = true},
			"IstaOperation started. Attach to IstaOperation.exe now.", "ISTAGUI", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Asterisk);
	}
	return istaOperation;
-------------------------------------------------------------------------------------
File -> Save module

Disable: ISTAGUI.App.CheckFreeDiskSpace()

ISTA+ config settings:
======================
ISTAGUI.exe.config:
<add key="BMW.Rheingold.ISTAGUI.disableCheckSystemRequirements" value="true" />
<add key="BMW.Rheingold.ISTAGUI.enableENETprogramming" value="true" />
ModifyEdiabasIni is not required after the "Fix ICOM apiInitExt" patch!
<add key="BMW.Rheingold.VehicleCommunication.ECUKom.ModifyEdiabasIni" value="true" />
For slow systems increase host ide timeout:
<add key="BMW.Rheingold.Programming.PsdzService.HostIdleTimeout" value="100000" />
More Debug info:
<add key="BMW.Rheingold.Programming.Prodias.LogLevel" value="TRACE" />
<add key="DebugLevel" value="5" />

Make sure the EDIABAS.INI settings has default values in this case:
[XEthernet]
RemoteHost       = Autodetect
TesterAddress    = F4,F5
ControlPort      = 6811
DiagnosticPort   = 6801
TimeoutConnect   = 2000

Remove Environment variable: COMPLUS_MDA
If the dealer numer is 0 execute RCleanerV4.4.exe once. Export [HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\BMWGroup] before if required.

Debugging:
Disable debugger detection in dnSpy (uncheck System.Diagnostics.Debugger option)!
After message box has been shown, attach to process IstaOperation.exe

Interesting breakpoints in RheingoldDiagnostics.dll:
BMW.Rheingold.RheingoldSessionController.Logic.StartVehicleTest() or
BMW.Rheingold.Diagnostics.VehicleIdent.DoVehicleIdentStep1() and BMW.Rheingold.Diagnostics.VehicleIdent.DoVehicleIdentStep2()
BMW.Rheingold.RheingoldSessionController.EcuFunctions.EcuTest.Perform()
BMW.Rheingold.Diagnostics.VehicleIdent.doECUReadFS()
BMW.Rheingold.Diagnostics.VehicleIdent.doECUReadFSDetails()
BMW.Rheingold.Diagnostics.VehicleIdent.SetDTCDetailValues()
BMW.Rheingold.RheingoldSessionController.EcuFunctions.EcuFunctionsReadStatus.DoReadStatus()
BMW.Rheingold.RheingoldSessionController.EcuFunctions.EcuFunctionsReadStatus.DoReadStatusSingleShot()
BMW.Rheingold.Programming.PsdzServiceStarter.ProgrammingService.StartPsdzServiceHost()
BMW.Rheingold.Psdz.Client.PsdzServiceStarter.IsServerInstanceRunning()
BMW.Rheingold.Psdz.Client.PsdzServiceClient()
BMW.Rheingold.Programming.StartHostIfNotRunning()
BMW.Rheingold.Programming.PsdzConfig.CreateServiceArgs()
PsdzServiceHost:
BMW.Rheingold.Psdz.Services.ConfigurationService.RequestBaureihenverbund()
BMW.Rheingold.Programming.ConnectToCar()
BMW.Rheingold.Programming.ConnectToProject()
BMW.Rheingold.Programming.ProgrammingEngine.States.RetrieveActualSwtEnablingCodesState.Handle(ProgrammingSession session)
BMW.Rheingold.Programming.ProgrammingEngine.SetSwtAction()
BMW.Rheingold.Programming.ProgrammingEngine.States.RetrieveActualFaState()
BMW.Rheingold.Psdz.PsdzObjectBuilder.BuildFa()
BMW.Rheingold.Programming.Common.ProgrammingUtils.CreateTalFilter()

ENET VoltageCheck:
BMW.Rheingold.Diagnostics.Common.VoltageUtils.CheckVoltageForEthernetConnection()
"G_MOTOR", "STATUS_LESEN", "ARG;MESSWERTE_IBS2015"
"G_MOTOR", "STATUS_MESSWERTE_IBS"

BMW.Rheingold.xVM:
VCIEnetHsfzService.ZGWBroadcastSendCyclic(), ReceiveCallback(),
VciDeviceService.CyclicBroadcastDeviceRequest(), VciDeviceService.ReceiveData(), VciDeviceService.CreateVciDevices()
SLP.ScanDeviceFromAttrList()
Match: "(DevId=),(Service=),(Serial=),(MacAddress=),(DevType=ENET),(ImageVersionBoot=),(ImageVersionApplication=),(ImageVersionPackage=),(Color=#ffffff),(Counter=),(State=4),(Owner=),(Kl15Voltage=),(Kl30Voltage=),(SignalStrength=),(VIN=),(Gateway=),(AccuCapacity=),(PowerSupply=0),(VciChannels=[0?;1?;2?;3+]),(Netmask=),(NetworkType=),(UUID=),(Port=6801),(ControlPort=),(PwfState=)"
"(DevId=WBA3X11010GV35856),(Service=),(Serial=DIAGADR10BMWMAC001A375355E5BMWVINWBA3X11010GV35856),(MacAddress=001A375355E5),(DevType=ENET),(ImageVersionBoot=),(ImageVersionApplication=),(ImageVersionPackage=),(Color=#ffffff),(Counter=),(State=4),(Owner=),(Kl15Voltage=),(Kl30Voltage=),(SignalStrength=),(VIN=WBA3X11010GV35856),(Gateway=),(AccuCapacity=),(PowerSupply=0),(VciChannels=[0?;1?;2?;3+]),(Netmask=),(NetworkType=),(UUID=),(Port=6801),(ControlPort=),(PwfState=)"
BMW.Rheingold.CoreFramework.DatabaseProvider
VCIDevice.GetClamp30(), VCIDevice.GetClamp15()

Checks for ISTA-D Update:
=========================
Export the source of the following modules:
- RheingoldCoreFramework.dll
- RheingoldPresentationFramework.dll
- RheingoldSessionController.dll
- RheingoldDiagnostics.dll

Update XML files in EdiabasLib\BmwDeepObd\VehicleInfo from: RheingoldDiagnostics\Diagnostics\EcuCharacteristics\Xml
Compare: RheingoldDiagnostics\Diagnostics\VehicleLogistics.cs: GetCharacteristics(), MRXEcuCharacteristics()

Read status processing:
=======================
EcuFunctionsReadStatus.DoReadStatus()
EcuFunctionsReadStatus.DoReadStatusSingleShot()
- ecuReadingTaskData.FixedFunctions: list of functions
- function.Jobs: list of jobs for function
- execute job: ECUKom.apiJob()
EcuFunctionsReadStatus.ProcessJobResults()
EcuFunctionsReadStatus.ConvertResultValue():
 value valid: value = value * (ecuResult.Multiplikator ?? 1m) + (ecuResult.Offset ?? 0m);
 value not valid: FindMatchingValue() or ConvertToString()

Get ECU function info (DiagDocDb.sqlite: Open with SQLiteStudio type=System.Data.SQLite)
EcuFunctionService.RetrieveFunctionDefinition()
 - GetEcuFunctionStructure()
 - SQL XEP_ECUGROUPS: GetEcuGroupByName(), match name (e.g. "d_ehc" id=1036022155)
 - SQL XEP_ECUGROUPFUNCTIONS: GetEcuGroupFunctionsByEcuGroupId(), match ecugroupid (e.g. ecugroupid=1036022155 -> id=2000000263355)
 - SQL XEP_ECUVARFUNCTIONS: GetEcuVariantFunctionByNameAndEcuGroupFunctionId(), match name and ecugroupfunctionid (e.g. name="ehc_e65" id=2000000263355 -> id=2000000264079)
 - SQL XEP_REFECUFUNCSTRUCTS: match all ids with ecuvariantfunctionid (e.g. id=2000000264079 -> ecufuncstructid=2000001159839, 2000001162603, 2000001179895, 2000001182931 ...)
 - SQL XEP_ECUFUNCSTRUCTURES: GetEcuFunctionStructureById(), match ecuFunctionstructureid
 - SQL XEP_ECUVARIANTS: GetEcuVariantByName(), match name (e.g. "ehc_e65" -> id=1036031243, ecugroupid=1036022155)
 - SQL XEP_REFECUVARIANTS: match id from XEP_ECUVARIANTS (e.g. 1036031243 -> id=2000000264079)
 - SQL XEP_ECUFIXEDFUNCTIONS: GetEcuFixedFunctionsByParentId(), match parentid from XEP_REFECUVARIANTS (e.g. 2000001182931 -> 2000001222439, 2000001222443)
 - SQL XEP_NODECLASSES: name="ECUFixedFunctionReadingIdentification" -> id=7164418
 - SQL GetFixedFunctionEcuJobsByNodeClass(), match nodeClass (e.g. nodeClass=7164418)
 - SQL XEP_ECUJOBS or XEP_REFECUJOBS: GetEcuJobsWithParameters(), match nodeClass and ecuFixedFunctionId (e.g. 2000001222439 -> id=2000001356499 name="LESEN_ANALOGWERTE")

Log files:
==========
ISTA creates a log file xxxIcomLogs*.tgz, this file is protected with the password: 3DkDxnKQZ1
obd.log contains the api and ifh log.

BMW ICOM:
=========
Get IP from ISTA+ search dialog
Standard settings:
X.X.X.X:58000

Firmware update:
X.X.X.X:60080
name: root
pw: NZY11502

At startup ICOM requires an ident broadcast to port 7811 from the ZGW.
Afterwarts it requests the ECU port configuration with: C3 DF F1 22 17 2A F6

Soap Reserve (Port 5302):
=========================
POST /ivm/services/ConnectorService HTTP/1.1
Content-Type: text/xml; charset=utf-8
SOAPAction: "http://www.bmw.com/services/ivm/Connector/v1/IVMConnector/reserveDevice"
Host: 192.168.10.221:5302
Content-Length: 260
Expect: 100-continue
Accept-Encoding: gzip, deflate
Connection: Keep-Alive

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Body><reserveDevice xmlns="http://www.bmw.com/services/ivm/Connector/v1"><deviceId>ICOM1120134</deviceId><owner>PCULRICHHOME3</owner><hostLock>0</hostLock></reserveDevice></s:Body></s:Envelope>HTTP/1.0 200 OK
Content-Type: text/xml;charset="utf-8"
Content-Length: 429
content-length: 429
Connection: Keep-Alive
Keep-Alive: timeout=5, max=5

<S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
	<S:Body>
	<ns2:reserveDeviceResponse xmlns="http://connector.auriga.nubix.com" xmlns:ns2="http://www.bmw.com/services/ivm/Connector/v1" xmlns:ns3="http://manager.auriga.nubix.com" xmlns:ns4="http://www.bmw.com/ibase/beans">
		<ns2:out>
			<error>0</error>
			<handle>132288249274725464</handle>
		</ns2:out>
	</ns2:reserveDeviceResponse>
	</S:Body>
</S:Envelope>

No host:
========
POST /nVm HTTP/1.1
User-Agent: Jakarta Commons-HttpClient/3.1
Host: 192.168.10.221:5302
Content-Length: 838
Content-Type: multipart/form-data; boundary=B_IZiIUcUrMpbqvNWoNhZO5BBpMvPyYAB

--B_IZiIUcUrMpbqvNWoNhZO5BBpMvPyYAB
Content-Disposition: form-data; name="FunctionName"
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 8bit

nvmAllocateDevice
--B_IZiIUcUrMpbqvNWoNhZO5BBpMvPyYAB
Content-Disposition: form-data; name="com.nubix.nvm.commands.Allocate"; filename="com.nubix.nvm.commands.Allocate"
Content-Type: application/octet-stream; charset=ISO-8859-1
Content-Transfer-Encoding: binary

<?xml version='1.0'?><!DOCTYPE wddxPacket SYSTEM 'http://www.openwddx.org/downloads/dtd/wddx_dtd_10.txt'><wddxPacket version='1.0'><header/><data><struct><var name='DeviceOwner'><string>EXPERT</string></var><var name='IfhClientIpAddr'><string>ANY_HOST</string></var><var name='IfhClientTcpPorts'><string>IP_PORT_ANY</string></var></struct></data></wddxPacket>
--B_IZiIUcUrMpbqvNWoNhZO5BBpMvPyYAB--
HTTP/1.0 200 OK
Content-Type: text/html
Content-Length: 379
content-length: 379
Connection: Close

<?xml version='1.0'?>
<!DOCTYPE wddxPacket SYSTEM 'wddx_dtd_10.dtd'>
<wddxPacket version="1.0">
<header><comment>nVmAllocateDevice</comment></header>
<data>
<struct>
<var name="Status"><struct><var name="code"><number>0</number></var><var name="msg"><number>0</number></var><var name="params"><array length="1"><null /></array></var></struct></var></struct></data>
</wddxPacket>

Soap Release (Port 5302):
=========================
Request:
POST /ivm/services/ConnectorService HTTP/1.1
Content-Type: text/xml; charset=utf-8
SOAPAction: "http://www.bmw.com/services/ivm/Connector/v1/IVMConnector/releaseDevice"
Host: 192.168.10.221:5302
Content-Length: 245
Expect: 100-continue
Accept-Encoding: gzip, deflate
Connection: Keep-Alive

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Body><releaseDevice xmlns="http://www.bmw.com/services/ivm/Connector/v1"><deviceId>ICOM1120134</deviceId><handle>132288249274725464</handle></releaseDevice></s:Body></s:Envelope>HTTP/1.0 200 OK
Content-Type: text/xml;charset="utf-8"
Content-Length: 389
content-length: 389
Connection: Keep-Alive
Keep-Alive: timeout=5, max=5

<S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
	<S:Body>
	<ns2:releaseDeviceResponse xmlns="http://connector.auriga.nubix.com" xmlns:ns2="http://www.bmw.com/services/ivm/Connector/v1" xmlns:ns3="http://manager.auriga.nubix.com" xmlns:ns4="http://www.bmw.com/ibase/beans">		<ns2:out>
			<error>0</error>
		</ns2:out>
	</ns2:releaseDeviceResponse>
	</S:Body>
</S:Envelope>

No host:
========
POST /nVm HTTP/1.1
User-Agent: Jakarta Commons-HttpClient/3.1
Host: 192.168.10.221:5302
Content-Length: 727
Content-Type: multipart/form-data; boundary=vArme02j6FQ28vlwaBozTtKMAEta8F3WgKjibB

--vArme02j6FQ28vlwaBozTtKMAEta8F3WgKjibB
Content-Disposition: form-data; name="FunctionName"
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 8bit

nvmReleaseDevice
--vArme02j6FQ28vlwaBozTtKMAEta8F3WgKjibB
Content-Disposition: form-data; name="com.nubix.nvm.commands.Release"; filename="com.nubix.nvm.commands.Release"
Content-Type: application/octet-stream; charset=ISO-8859-1
Content-Transfer-Encoding: binary

<?xml version='1.0'?><!DOCTYPE wddxPacket SYSTEM 'http://www.openwddx.org/downloads/dtd/wddx_dtd_10.txt'><wddxPacket version='1.0'><header/><data><struct><var name='DeviceOwner'><string>EXPERT</string></var></struct></data></wddxPacket>
--vArme02j6FQ28vlwaBozTtKMAEta8F3WgKjibB--
HTTP/1.0 200 OK
Content-Type: text/xml;charset="utf-8"
Content-Length: 178
content-length: 178
Connection: Close

<?xml version='1.0'?>
<!DOCTYPE wddxPacket SYSTEM 'wddx_dtd_10.dtd'>
<wddxPacket version="1.0">
<header><comment>nvmReleaseDevice</comment></header>
<data>
</data>
</wddxPacket>
