Debugging of ISTA-D:
====================

Decompile ISTA-D:
=================
Copy files from "TesterGUI\bin\Release" to "TesterGUI\bin\ReleaseMod"
de4dot -r "TesterGUI\bin\Release" -ru -ro "TesterGUI\bin\ReleaseMod" --dont-rename
The files in "TesterGUI\bin\Release" are not modified, "TesterGUI\bin\ReleaseMod" now contains the deobfuscated files.

Compile dnSpy-x86:
============================
git clone --recursive https://github.com/0xd4d/dnSpy.git
Install .NET Core 3.0 SDK and .NET Core 3.1 SDK
Install .NET Framework 4.8 SDK and Package for target version .NET Framework 4.8 in VS2019
Open dnSpy.sln in VS2019 and build solution as release
The binary is in the subfolder: dnSpy\dnSpy\bin\Release\net48\dnSpy-x86.exe

Debug ISTA-D with dnSpy-x86:
============================
Modify IstaOperationController.dll (Edit -> Edit class, remove all references to other ISTA-D version first):
in IstaOperationStarter.Start() add at the end of the function:
-------------------------------------------------------------------------------------
	if (Debugger.IsAttached)
	{
		System.Windows.Forms.MessageBox.Show("IstaOperation started. Attach to IstaOperation.exe now.");
	}
	return istaOperation;
-------------------------------------------------------------------------------------
File -> Save module

Debugging:
Disable debugger detection in dnSpy (uncheck System.Diagnostics.Debugger option)!
After message box has been shown, attach to process IstaOperation.exe

Breakpoints in RheingoldDiagnostics.dll:
BMW.Rheingold.RheingoldSessionController.Logic.StartVehicleTest() or
BMW.Rheingold.Diagnostics.VehicleIdent.DoVehicleIdentStep1() and BMW.Rheingold.Diagnostics.VehicleIdent.DoVehicleIdentStep2()

Read status processing:
=======================
EcuFunctionsReadStatus.DoReadStatus()
EcuFunctionsReadStatus.DoReadStatusSingleShot()
- ecuReadingTaskData.FixedFunctions: list of functions
- function.Jobs: list of jobs for function
- execute job: ECUKom.apiJob()
EcuFunctionsReadStatus.ProcessJobResults()
EcuFunctionsReadStatus.ConvertResultValue():
 value valid: value = value * (ecuResult.Multiplikator ?? 1m) + (ecuResult.Offset ?? 0m);
 value not valid: FindMatchingValue() or ConvertToString()

Get ECU function info (DiagDocDb.sqlite: Open with SQLiteStudio type=System.Data.SQLite)
EcuFunctionService.RetrieveFunctionDefinition()
 - GetEcuFunctionStructure()
 - SQL XEP_ECUGROUPS: GetEcuGroupByName(), match name (e.g. "d_ehc" id=1036022155)
 - SQL XEP_ECUGROUPFUNCTIONS: GetEcuGroupFunctionsByEcuGroupId(), match ecugroupid (e.g. ecugroupid=1036022155 -> id=2000000263355)
 - SQL XEP_ECUVARFUNCTIONS: GetEcuVariantFunctionByNameAndEcuGroupFunctionId(), match name and ecugroupfunctionid (e.g. name="ehc_e65" id=2000000263355 -> id=2000000264079)
 - SQL XEP_REFECUFUNCSTRUCTS: match all ids with ecuvariantfunctionid (e.g. id=2000000264079 -> ecufuncstructid=2000001159839, 2000001162603, 2000001179895, 2000001182931 ...)
 - SQL XEP_ECUFUNCSTRUCTURES: GetEcuFunctionStructureById(), match ecuFunctionstructureid
 - SQL XEP_ECUVARIANTS: GetEcuVariantByName(), match name (e.g. "ehc_e65" -> id=1036031243, ecugroupid=1036022155)
 - SQL XEP_REFECUVARIANTS: match id from XEP_ECUVARIANTS (e.g. 1036031243 -> id=2000000264079)
 - SQL XEP_ECUFIXEDFUNCTIONS: GetEcuFixedFunctionsByParentId(), match parentid from XEP_REFECUVARIANTS (e.g. 2000001182931 -> 2000001222439, 2000001222443)
 - SQL GetFixedFunctionEcuJobsByNodeClass(), match nodeClass
 - SQL XEP_ECUJOBS or XEP_REFECUJOBS: GetEcuJobsWithParameters(), match ecuFixedFunctionId (e.g. 2000001222439 -> id=2000001356499 name="LESEN_ANALOGWERTE")
